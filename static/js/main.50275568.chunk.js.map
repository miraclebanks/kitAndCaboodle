{"version":3,"sources":["logo.svg","Components/Card/card.jsx","Components/Card-List/card-list.jsx","Components/SearchBar/searchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","kitties","id","name","CardList","map","key","SearchBar","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredKitties","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,oLCG9BC,G,kBAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,gBACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,4BAAKL,EAAMI,QAAQE,SCKRC,G,MAVE,SAACP,GAAD,OACf,yBAAKC,UAAU,aACZD,EAAMI,QAAQI,KAAI,SAACJ,GAAD,OACjB,kBAAC,EAAD,CAAMK,IAAKL,EAAQC,GAAID,QAASA,GAC7B,WCDMM,G,MAJG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAChB,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC+C5CG,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAhB1C,EAAKC,MAAQ,CACXjB,QAAS,GACTc,YAAa,IALH,E,gEASO,IAAD,OAElBI,MAAM,8CAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEb,QAASsB,S,+BAOpC,IAAD,EAC0BC,KAAKN,MAA9BjB,EADD,EACCA,QAASc,EADV,EACUA,YAEXU,EAAkBxB,EAAQyB,QAAO,SAACzB,GAAD,OAErCA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAK7B,UAAU,OACb,wBAAII,GAAG,YAAP,4BACA,qDACA,kBAAC,EAAD,CACEM,YAAY,eACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUR,QAASwB,S,GAvCTI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50275568.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster-photo\"\n      src={`https://robohash.org/${props.kitties.id}?set=set4&size=180x180`}\n    />\n    <h1>{props.kitties.name}</h1>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport { Card } from \"../Card/card.jsx\";\nimport \"./card-list.styles.css\";\n\nconst CardList = (props) => (\n  <div className=\"card-list\">\n    {props.kitties.map((kitties) => (\n      <Card key={kitties.id} kitties={kitties}>\n        {\" \"}\n      </Card>\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from \"react\";\nimport \"./seachbar.styles.css\";\n\nconst SearchBar = ({ placeholder, handleChange }) => (\n  <input type=\"search\" placeholder={placeholder} onChange={handleChange} />\n);\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CardList from \"./Components/Card-List/card-list\";\nimport SearchBar from \"./Components/SearchBar/searchBar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      kitties: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    //when rendered -> js fetches jsonplaceholder and return a promise\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      // converts fetch response to json so javascript can read\n      .then((response) => response.json())\n      //javascript takes response and store it as user property in monsters array\n      .then((users) => this.setState({ kitties: users }));\n  }\n\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { kitties, searchField } = this.state;\n    // filters through monsters and lowercases name\n    const filteredKitties = kitties.filter((kitties) =>\n      //also lowercases user input if the type capital letters\n      kitties.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 id=\"app-name\">The Whole Kit & Caboodle</h1>\n        <h5>Find a kitty you like</h5>\n        <SearchBar\n          placeholder=\"Find a Kitty\"\n          handleChange={this.handleChange}\n        />\n        <CardList kitties={filteredKitties}></CardList>\n      </div>\n    );\n  }\n} //end of app\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}